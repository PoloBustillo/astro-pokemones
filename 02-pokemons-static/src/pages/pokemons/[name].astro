---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import { Icon } from "astro-icon/components";

import PokemonCard from "@components/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemons-list.response";
export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const data = (await resp.json()) as PokemonListResponse;
  const paths = data.results.map((pokemon) => ({
    params: { name: pokemon.name },
    props: {
      name: pokemon.name,
      url: pokemon.url,
      id: pokemon.url.split("/")[6],
    },
  }));
  return paths;
}) satisfies GetStaticPaths;

const { name, id, url } = Astro.props;
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
---

<Layout title="pokemon">
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div>
      <div class="flex flex-row justify-around">
        <div>
          <button onclick="history.back()" class="text-blue-500"
            >Regresar</button
          >
          <h2 class:list={["capitalize font-bold text-black", "text-3xl"]}>
            #{id}
            {name}
          </h2>
        </div>

        <button data-name={name} data-id={id} id="heart" class="mt-8">
          <Icon
            class="hidden heart-filled"
            size={30}
            color={"red"}
            name={"heart-filled"}
          />
          <Icon
            class="heart-empty"
            size={30}
            color={"red"}
            name={"heart-empty"}
          />
        </button>
      </div>
      <PokemonCard name={name} url={url} isBig />
      <audio class="m-2" controls>
        <source src={audioSrc} type="audio/ogg" />
        Your browser does not support the audio element.
      </audio>
    </div>
  </section>
</Layout>
<style>
  #heart {
    @apply cursor-pointer;
    @apply hover:animate-pulse;
  }
</style>
<script>
  import type { PokemonLocalStorage } from "@interfaces/pokemon-localStorage";

  const handleHeartLoad = () => {
    let favoritePokemons: PokemonLocalStorage[] =
      JSON.parse(localStorage.getItem("favoritePokemons") ?? "[]") || [];

    const heart = document.querySelector("#heart") as HTMLButtonElement;
    const heartFilled = document.querySelector(".heart-filled") as SVGElement;
    const heartEmpty = document.querySelector(".heart-empty") as SVGElement;
    const { name, id } = heart.dataset;
    const isFavorite = favoritePokemons.some(
      (fav: PokemonLocalStorage) => fav.id === id
    );
    if (isFavorite) {
      heartFilled.classList.remove("hidden");
      heartEmpty.classList.add("hidden");
    } else {
      heartEmpty.classList.remove("hidden");
      heartFilled.classList.add("hidden");
    }
    const toggleFavorite = () => {
      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter(
          (fav: PokemonLocalStorage) => fav.id !== id
        );
      } else {
        if (name && id) {
          favoritePokemons.push({ name, id });
        }
      }
      localStorage.setItem(
        "favoritePokemons",
        JSON.stringify(favoritePokemons)
      );
    };

    if (!heart) return;
    heart.addEventListener("click", () => {
      heartFilled.classList.toggle("hidden");
      heartEmpty.classList.toggle("hidden");
      toggleFavorite();
    });
  };
  document.addEventListener("astro:page-load", handleHeartLoad);
</script>
